{"version":3,"file":"static/js/907.9a7a7fbc.chunk.js","mappings":"iLA+JQ,QA5JR,WACE,MAAOA,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,IAChCK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,KAC9CO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAS,QAEvCS,EAAqB,CACzBC,KAAM,CAAEC,cAAe,EAAGC,cAAe,EAAGC,mBAAoB,GAAIC,eAAgB,GACpFC,OAAQ,CAAEJ,cAAe,EAAGC,cAAe,GAAIC,mBAAoB,GAAIC,eAAgB,GACvFE,KAAM,CAAEL,cAAe,EAAGC,cAAe,GAAIC,mBAAoB,GAAIC,eAAgB,IAGjFG,EAAgBA,CAACC,EAAWC,KAChC,MAAMC,EAAW,6BACXC,EAAaD,EAASE,KAAKC,MAAsBH,GAAhBE,KAAKE,WACtCC,EAASH,KAAKC,MAAMD,KAAKE,UAAYL,EAAYD,EAAY,IAAMA,EAAY,EACrF,OAAOG,EAAa,IAAIK,OAAOD,EAAO,EAIlCE,EAAe7B,GAAS,WAAW8B,KAAK9B,GAExC+B,EAAYC,iBAAyC,IAAlCC,EAAeC,UAAAP,OAAA,QAAAQ,IAAAD,UAAA,GAAAA,UAAA,GAAGzB,EACzC,MAAM,cAAEI,EAAa,cAAEC,EAAa,mBAAEC,GAAuBJ,EAAmBsB,GAChFzB,EAAkB,IAElB,IAAI4B,GAAiB,EACjBC,EAAa,GAEjB,MAAQD,GAAgB,CACtB,MAAME,EAAQnB,EAAcN,EAAeC,GACrCyB,QAAiBC,MAAM,qCAADC,OAAsCH,EAAK,mBACjEI,QAAcH,EAASI,OAGvBC,EADIC,EAAQ,OACIC,QAAQJ,EAAO,CACnC1C,IAAS,IAAD+C,EACN,MAAMC,EAAgB,QAAZD,EAAG/C,EAAKiD,YAAI,IAAAF,OAAA,EAATA,EAAWG,MAAKC,GAAOA,EAAIC,WAAW,QACnD,OAAOJ,EAAOK,WAAWL,EAAKM,MAAM,KAAK,IAAM,CAAC,GAEjD,CAAC,OAAQ,QAENC,EAAcX,EAAYY,MAAM,EAAGZ,EAAYjB,OAASZ,GAE9D,IAAK,MAAM0C,KAAWF,EAIpB,GAHAlB,EAAaoB,EAAQzD,KAAK0D,cAGrB7B,EAAYQ,GAIjB,IACE,MAAMsB,QAAqBnB,MAAM,mDAADC,OAAoDJ,EAAWuB,gBAC/F,GAAID,EAAaE,GAAI,CACnB,MAAMC,QAAiBH,EAAahB,OACpC,IAAKmB,EAASC,OAA4B,yBAAnBD,EAASC,MAAkC,CAChE3B,GAAiB,EACjB,KACF,CACF,CACF,CAAE,MAAO4B,GACPC,QAAQD,MAAM,uCAAwCA,EACxD,CAEJ,CAEI5B,GACFnC,EAAQoC,GACRjC,EAAe,KAAKwB,OAAOS,EAAWV,SACtCrB,EAAWK,EAAmBsB,GAAiBjB,iBAE/CiD,QAAQD,MAAM,mDAElB,GAIAE,EAAAA,EAAAA,YAAU,KACRnC,GAAW,GACV,CAACtB,KAEJyD,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAaC,IACjB,MAAMC,EAASD,EAAME,IAAIZ,cACrBU,EAAMG,SAAW,IAAMH,EAAMG,SAAW,KAAOhE,EAAeiE,SAASH,IAAWhE,EAAU,GAAKL,GACnGyE,EAAYJ,EACd,EAGF,OADAK,OAAOC,iBAAiB,UAAWR,GAC5B,IAAMO,OAAOE,oBAAoB,UAAWT,EAAU,GAC5D,CAAC5D,EAAgBF,EAASL,EAAMG,IAEnC,MAAMsE,EAAeJ,IACnB,GAAI9D,EAAeiE,SAASH,GAC1B,OAEF,IAAIQ,EAAa1E,EAAYmD,MAAM,KAC/BwB,GAAa,EAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAI/E,EAAK2B,OAAQoD,IAC3B/E,EAAK+E,KAAOV,IACdQ,EAAWE,GAAKV,EAChBS,GAAa,GAIjB1E,EAAeyE,EAAWG,KAAK,MAC/BxE,GAAkByE,GAAe,IAAIA,EAAaZ,KAE9CS,GACFxE,GAAW4E,GAAeA,EAAc,GAC1C,EAGIC,EAAaC,IACjB1E,EAAc0E,GACd5E,EAAkB,IAClBF,EAAWK,EAAmByE,GAAepE,gBAC7Ce,EAAUqD,EAAc,EAU1B,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,eAAcC,SAAElF,KAC7BmF,EAAAA,EAAAA,KAAA,OAAKC,IATaC,MACtB,MAAMC,EAAehF,EAAmBF,GAAYO,eAEpD,MAAM,oBAANyB,OADmBkD,EAAetF,EACG,SAMvBqF,GAAmBE,IAAI,UAAUN,UAAU,mBACrDE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,OAAMC,SAAEpF,KACrBqF,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kBAAiBC,SAAEhF,EAAeyE,KAAK,OACvC,IAAZ3E,GACCgF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,sBAAqBC,SAAA,CAAC,0BAAwBvF,EAAK,OAC9D,MACFG,EAAYqE,SAAS,MAAQnE,EAAU,GACvCmF,EAAAA,EAAAA,KAAA,KAAGF,UAAU,qBAAoBC,SAAC,mDAChC,MACU,IAAZlF,IAAmBF,EAAYqE,SAAS,MAAQnE,EAAU,KAC1DmF,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAQK,QAASA,IAAMV,EAAU,QAAQI,SAAC,UAC1CC,EAAAA,EAAAA,KAAA,UAAQK,QAASA,IAAMV,EAAU,UAAUI,SAAC,YAC5CC,EAAAA,EAAAA,KAAA,UAAQK,QAASA,IAAMV,EAAU,QAAQI,SAAC,gBAOxD,C,gDC5JA,SAAiB,C","sources":["Hangman/Hangman.js","webpack://game-arcade/./src/Hangman/Hangman.css?8a0e"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Hangman.css';\r\n\r\nfunction Hangman() {\r\n  const [word, setWord] = useState('');\r\n  const [displayWord, setDisplayWord] = useState('');\r\n  const [guesses, setGuesses] = useState(6);\r\n  const [guessedLetters, setGuessedLetters] = useState([]);\r\n  const [difficulty, setDifficulty] = useState('easy');\r\n  \r\n  const difficultySettings = {\r\n    easy: { minWordLength: 6, maxWordLength: 9, commonalityDivider: 80, guessesAllowed: 8 },\r\n    medium: { minWordLength: 7, maxWordLength: 11, commonalityDivider: 55, guessesAllowed: 7 },\r\n    hard: { minWordLength: 8, maxWordLength: 13, commonalityDivider: 25, guessesAllowed: 6 }\r\n  };\r\n  \r\n  const generateQuery = (minLength, maxLength) => {\r\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const randomChar = alphabet[Math.floor(Math.random() * alphabet.length)];\r\n    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength - 1;\r\n    return randomChar + '?'.repeat(length);\r\n  };\r\n  \r\n  \r\n  const isValidWord = (word) => /^[A-Z]+$/.test(word);\r\n  \r\n  const fetchWord = async (difficultyLevel = difficulty) => {\r\n    const { minWordLength, maxWordLength, commonalityDivider } = difficultySettings[difficultyLevel];\r\n    setGuessedLetters([]);\r\n  \r\n    let validWordFound = false;\r\n    let randomWord = '';\r\n  \r\n    while (!validWordFound) {\r\n      const query = generateQuery(minWordLength, maxWordLength);\r\n      const response = await fetch(`https://api.datamuse.com/words?sp=${query}&max=1000&md=f`);\r\n      const words = await response.json();\r\n  \r\n      const _ = require('lodash');\r\n      const sortedWords = _.orderBy(words, [\r\n        word => {\r\n          const fTag = word.tags?.find(tag => tag.startsWith('f:'));\r\n          return fTag ? parseFloat(fTag.split(':')[1]) : 0;\r\n        }\r\n      ], ['desc', 'asc']);    \r\n  \r\n      const commonWords = sortedWords.slice(0, sortedWords.length / commonalityDivider);\r\n  \r\n      for (const wordObj of commonWords) {\r\n        randomWord = wordObj.word.toUpperCase();\r\n  \r\n        // Check if the word contains only alphabet characters\r\n        if (!isValidWord(randomWord)) {\r\n          continue;\r\n        }\r\n  \r\n        try {\r\n          const dictResponse = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${randomWord.toLowerCase()}`);\r\n          if (dictResponse.ok) {\r\n            const dictData = await dictResponse.json();\r\n            if (!dictData.title || dictData.title !== \"No Definitions Found\") {\r\n              validWordFound = true;\r\n              break;\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching word from dictionary:', error);\r\n        }\r\n      }\r\n    }\r\n  \r\n    if (validWordFound) {\r\n      setWord(randomWord);\r\n      setDisplayWord('_ '.repeat(randomWord.length));\r\n      setGuesses(difficultySettings[difficultyLevel].guessesAllowed);\r\n    } else {\r\n      console.error('No valid word found within the given parameters.');\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  useEffect(() => {\r\n    fetchWord();\r\n  }, [difficulty]);\r\n  \r\n  useEffect(() => {\r\n    const onKeyDown = (event) => {\r\n      const letter = event.key.toUpperCase();\r\n      if (event.keyCode >= 65 && event.keyCode <= 90 && !guessedLetters.includes(letter) && guesses > 0 && word) {\r\n        handleGuess(letter);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", onKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\r\n  }, [guessedLetters, guesses, word, displayWord]);\r\n  \r\n  const handleGuess = (letter) => {\r\n    if (guessedLetters.includes(letter)) {\r\n      return;\r\n    }\r\n    let newDisplay = displayWord.split(' ');\r\n    let wrongGuess = true;\r\n    \r\n    for (let i = 0; i < word.length; i++) {\r\n      if (word[i] === letter) {\r\n        newDisplay[i] = letter;\r\n        wrongGuess = false;\r\n      }\r\n    }\r\n    \r\n    setDisplayWord(newDisplay.join(' '));\r\n    setGuessedLetters(prevLetters => [...prevLetters, letter]);\r\n    \r\n    if (wrongGuess) {\r\n      setGuesses(prevGuesses => prevGuesses - 1);\r\n    }\r\n  };\r\n  \r\n  const resetGame = (newDifficulty) => {\r\n    setDifficulty(newDifficulty);\r\n    setGuessedLetters([]);\r\n    setGuesses(difficultySettings[newDifficulty].guessesAllowed);\r\n    fetchWord(newDifficulty);\r\n  };\r\n  \r\n  \r\n  const getHangmanImage = () => {\r\n    const totalGuesses = difficultySettings[difficulty].guessesAllowed;\r\n    const imageIndex = totalGuesses - guesses;\r\n    return `/Hangman/hangman ${imageIndex}.svg`;\r\n  }\r\n  \r\n  return (\r\n      <div className=\"game-box\">\r\n        <p className=\"guesses-left\">{guesses}</p>\r\n        <img src={getHangmanImage()} alt=\"Hangman\" className=\"hangman-image\" />\r\n        <p className=\"word\">{displayWord}</p>\r\n        <p className=\"guessed-letters\">{guessedLetters.join(' ')}</p>\r\n        {guesses === 0 ? (\r\n          <p className=\"result loss-message\">You lost! The word was {word}.</p>\r\n        ) : null}\r\n        {!displayWord.includes('_') && guesses > 0 ? (\r\n          <p className=\"result win-message\">You won! Click a new difficulty to play again.</p>\r\n        ) : null}\r\n        {(guesses === 0 || (!displayWord.includes('_') && guesses > 0)) && (\r\n          <div>\r\n            <div className=\"difficulty\">\r\n              <button onClick={() => resetGame('easy')}>EASY</button>\r\n              <button onClick={() => resetGame('medium')}>MEDIUM</button>\r\n              <button onClick={() => resetGame('hard')}>HARD</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n\r\n}\r\n        \r\n        export default Hangman;\r\n        ","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["word","setWord","useState","displayWord","setDisplayWord","guesses","setGuesses","guessedLetters","setGuessedLetters","difficulty","setDifficulty","difficultySettings","easy","minWordLength","maxWordLength","commonalityDivider","guessesAllowed","medium","hard","generateQuery","minLength","maxLength","alphabet","randomChar","Math","floor","random","length","repeat","isValidWord","test","fetchWord","async","difficultyLevel","arguments","undefined","validWordFound","randomWord","query","response","fetch","concat","words","json","sortedWords","require","orderBy","_word$tags","fTag","tags","find","tag","startsWith","parseFloat","split","commonWords","slice","wordObj","toUpperCase","dictResponse","toLowerCase","ok","dictData","title","error","console","useEffect","onKeyDown","event","letter","key","keyCode","includes","handleGuess","window","addEventListener","removeEventListener","newDisplay","wrongGuess","i","join","prevLetters","prevGuesses","resetGame","newDifficulty","_jsxs","className","children","_jsx","src","getHangmanImage","totalGuesses","alt","onClick"],"sourceRoot":""}