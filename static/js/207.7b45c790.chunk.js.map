{"version":3,"file":"static/js/207.7b45c790.chunk.js","mappings":"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","sources":["Trivia/Trivia.js","webpack://game-arcade/./src/Trivia/Trivia.css?1805"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Trivia.css';\r\n\r\nconst shuffleArray = (array) => {\r\n  return [...array].sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst Trivia = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\r\n  const [timeLeft, setTimeLeft] = useState(80);\r\n  const [feedback, setFeedback] = useState('');\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [waitingForNext, setWaitingForNext] = useState(false);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n  const [incorrectCount, setIncorrectCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (gameStarted) {\r\n      fetchQuestions();\r\n    }\r\n  }, [gameStarted]);\r\n\r\n  useEffect(() => {\r\n    if (questions.length > 0 && currentQuestionIndex < questions.length) {\r\n      setShuffledAnswers(shuffleArray([...questions[currentQuestionIndex].incorrect_answers, questions[currentQuestionIndex].correct_answer]));\r\n      resetTimer();\r\n      setFeedback('');\r\n    }\r\n  }, [currentQuestionIndex, questions, gameStarted]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    if (!waitingForNext && gameStarted) {\r\n      interval = setInterval(() => {\r\n        setTimeLeft(prevTime => Math.max(0, prevTime - 1));\r\n      }, 100);\r\n      if (timeLeft === 0) {\r\n        clearInterval(interval);\r\n        handleTimeOut();\r\n      }\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [timeLeft, gameStarted, waitingForNext]);\r\n\r\n  const fetchQuestions = async () => {\r\n    const response = await fetch('https://opentdb.com/api.php?amount=50&difficulty=easy&type=multiple');\r\n    const data = await response.json();\r\n    if (data.response_code === 0 && Array.isArray(data.results)) {\r\n      setQuestions(data.results.map(q => ({\r\n        ...q,\r\n        answers: shuffleArray([q.correct_answer, ...q.incorrect_answers]),\r\n      })));\r\n    }\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setTimeLeft(80);\r\n    setWaitingForNext(false);\r\n  };\r\n\r\n  const handleTimeOut = () => {\r\n    if (!waitingForNext) {\r\n      setFeedback(`Time's up! The correct answer was: ${questions[currentQuestionIndex]?.correct_answer}`);\r\n      setIncorrectCount(count => count + 1);\r\n      setWaitingForNext(true);\r\n      setTimeout(() => {\r\n        showNextQuestion();\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  const handleAnswerClick = (answer) => {\r\n    if (!waitingForNext) {\r\n      const isCorrect = answer === questions[currentQuestionIndex].correct_answer;\r\n      setFeedback(isCorrect ? \"Correct!\" : `Wrong! The correct answer was: ${questions[currentQuestionIndex].correct_answer}`);\r\n      if (isCorrect) {\r\n        setCorrectCount(count => count + 1);\r\n      } else {\r\n        setIncorrectCount(count => count + 1);\r\n      }\r\n      setWaitingForNext(true);\r\n      setTimeout(() => {\r\n        showNextQuestion();\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  const showNextQuestion = () => {\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(index => index + 1);\r\n      resetTimer();\r\n    } else {\r\n      setFeedback(\"You've reached the end of the quiz!\");\r\n      setGameStarted(false);\r\n    }\r\n  };\r\n\r\n  const handleStartGame = () => {\r\n    setGameStarted(true);\r\n    setCorrectCount(0);\r\n    setIncorrectCount(0);\r\n    resetTimer();\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-box\">\r\n      {!gameStarted ? (\r\n        <>\r\n        <h1>TRIVIA</h1>\r\n        <button className=\"start-button\" onClick={handleStartGame}>Start Game</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {questions.length > 0 && currentQuestionIndex < questions.length ? (\r\n            <>\r\n              <div className=\"question\" dangerouslySetInnerHTML={{ __html: questions[currentQuestionIndex].question }} />\r\n              <div className=\"answers\">\r\n                {shuffledAnswers.map((answer, index) => (\r\n                  <button key={index} className=\"answer-button\" onClick={() => handleAnswerClick(answer)} dangerouslySetInnerHTML={{ __html: answer }} />\r\n                ))}\r\n              </div>\r\n              <div className=\"feedback\" style={{ opacity: feedback ? 1 : 0 }}>{feedback}</div>\r\n              <div className=\"time-bar\" style={{ width: `${timeLeft}%` }}></div>\r\n              <div className=\"scoreboard\">Correct: {correctCount} | Incorrect: {incorrectCount}</div>\r\n            </>\r\n          ) : (\r\n            <div>Loading questions...</div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trivia;\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["shuffleArray","array","sort","Math","random","Trivia","questions","setQuestions","useState","currentQuestionIndex","setCurrentQuestionIndex","shuffledAnswers","setShuffledAnswers","timeLeft","setTimeLeft","feedback","setFeedback","gameStarted","setGameStarted","waitingForNext","setWaitingForNext","correctCount","setCorrectCount","incorrectCount","setIncorrectCount","useEffect","fetchQuestions","length","incorrect_answers","correct_answer","resetTimer","interval","setInterval","prevTime","max","clearInterval","handleTimeOut","async","response","fetch","data","json","response_code","Array","isArray","results","map","q","answers","_questions$currentQue","concat","count","setTimeout","showNextQuestion","index","_jsx","className","children","_Fragment","_jsxs","dangerouslySetInnerHTML","__html","question","answer","onClick","isCorrect","handleAnswerClick","style","opacity","width","handleStartGame"],"sourceRoot":""}