{"version":3,"file":"static/js/505.4a8730cd.chunk.js","mappings":"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","sources":["Pong/Pong.js","webpack://game-arcade/./src/Pong/Pong.css?caa7"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Pong.css';\r\n\r\nconst StartScreen = ({ onStart }) => (\r\n  <div className=\"pong\">\r\n    <div\r\n      className=\"overlay\"\r\n      style={{ backgroundColor: 'rgba(0, 0, 0, 0.85)' }}>\r\n      <div className=\"start-screen\">\r\n        <h1>Welcome to Pong!</h1>\r\n        <button onClick={onStart}>Start Game</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n  const GameOverScreen = ({ score, onRestart }) => (\r\n    <div className=\"pong\">\r\n      <div\r\n        className=\"overlay\"\r\n        style={{ backgroundColor: 'rgba(0, 0, 0, 0.85)' }}>\r\n        <div className=\"game-over-screen\">\r\n          <h1>Game Over</h1>\r\n          <p>Your score: {score}</p>\r\n          <button onClick={onRestart}>Restart Game</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\nconst Paddle = ({ top, isOpponent = false }) => (\r\n  <div\r\n    className=\"paddle\"\r\n    style={{\r\n      top: `${top}%`,\r\n      left: isOpponent ? 'auto' : '10px',\r\n      right: isOpponent ? '10px' : 'auto',\r\n    }}\r\n  />\r\n);\r\n\r\nconst Ball = ({ top, left }) => (\r\n  <div className=\"ball\" style={{ top: `${top}%`, left: `${left}%` }} />\r\n);\r\n\r\nfunction App() {\r\n  const [paddlePos, setPaddlePos] = useState(40);\r\n  const [opponentPaddlePos, setOpponentPaddlePos] = useState(40);\r\n  const [ballPos, setBallPos] = useState({ top: 50, left: 50 });\r\n  const [ballDirection, setBallDirection] = useState({ x: 1, y: -1 });\r\n  const [ballSpeed, setBallSpeed] = useState(1.2);\r\n  const baseBallSpeed = 1;\r\n  const speedIncrement = 0.1;\r\n  const [score, setScore] = useState(0);\r\n  const [isGameStarted, setIsGameStarted] = useState(false);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  \r\n\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setBallSpeed(ballSpeed => ballSpeed + 0.04);\r\n    }, 1000);\r\n  return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    \r\n    const handleKeyDown = (event) => {\r\n      const paddleHeight = 20;\r\n      if (event.key === 'ArrowUp' && paddlePos > 0) {\r\n        setPaddlePos(prev => Math.max(prev - 5, 0)); \r\n      } else if (event.key === 'ArrowDown' && paddlePos < 100 - paddleHeight) { \r\n        setPaddlePos(prev => Math.min(prev + 5, 100 - paddleHeight)); \r\n      }\r\n    };\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [paddlePos]);\r\n\r\n  useEffect(() => {\r\n    if (!isGameStarted) return;\r\n    const paddleHeight = 20;\r\n\r\n    const moveBall = () => {\r\n      let newTop = ballPos.top + ballDirection.y * ballSpeed;\r\n      let newLeft = ballPos.left + ballDirection.x * ballSpeed;\r\n\r\n      const willMiss = Math.random() < 0.9;\r\n\r\n      \r\n      const opponentMoveSpeed = 1.3**score; \r\n      if (ballPos.top > opponentPaddlePos + paddleHeight / 2) {\r\n        setOpponentPaddlePos(prevPos => Math.min(prevPos + opponentMoveSpeed, 100 - paddleHeight));\r\n      } else if (ballPos.top < opponentPaddlePos + paddleHeight / 2) {\r\n        setOpponentPaddlePos(prevPos => Math.max(prevPos - opponentMoveSpeed, 0));\r\n      }\r\n\r\n      \r\n      if (newTop <= 0 || newTop >= 95) {\r\n        setBallDirection(prev => ({ ...prev, y: -prev.y }));\r\n      }\r\n      const ballDiameter = 3\r\n      \r\n      if (\r\n        newLeft <= (1 + ballDiameter) && \r\n        newTop + ballDiameter >= paddlePos && \r\n        newTop <= paddlePos + paddleHeight \r\n      ) {\r\n        setBallDirection(prev => ({ ...prev, x: -prev.x }));\r\n      }\r\n\r\n      \r\n      if (\r\n        newLeft >= 95 - ballDiameter && \r\n        newTop + ballDiameter >= opponentPaddlePos && \r\n        newTop <= opponentPaddlePos + paddleHeight \r\n      ) {\r\n        setBallDirection(prev => ({ ...prev, x: -prev.x }));\r\n      }\r\n\r\n      \r\n      if (newLeft < 0 || newLeft > 100) {\r\n        setBallPos({ top: 50, left: 50 }); \r\n        if (newLeft < 0) {\r\n          setIsGameOver(true);\r\n        } else {\r\n          setScore((currentScore) => currentScore + 1);\r\n          setBallSpeed(currentSpeed => Math.min(currentSpeed + 0.1, 2)); \r\n        }\r\n      } else {\r\n        setBallPos({ top: newTop, left: newLeft }); \r\n      }\r\n      const resetBallSpeed = () => {\r\n        setBallSpeed(1); \r\n      };\r\n\r\n    };\r\n\r\n    const updateOpponentPaddle = () => {\r\n      const targetPos = ballPos.top - paddleHeight / 2;\r\n      const moveSpeed = 0.05; \r\n      setOpponentPaddlePos(prevPos => prevPos + (targetPos - prevPos) * moveSpeed);\r\n    };\r\n  \r\n    \r\n    const ballInterval = setInterval(moveBall, 50); \r\n    const opponentInterval = setInterval(updateOpponentPaddle, 50); \r\n  \r\n    \r\n    return () => {\r\n      clearInterval(ballInterval);\r\n      clearInterval(opponentInterval);\r\n    };\r\n  }, [ballPos, ballDirection, ballSpeed, isGameStarted, paddlePos, opponentPaddlePos, score]);\r\n  const startGame = () => {\r\n    setIsGameStarted(true);\r\n  };\r\n  \r\n  const restartGame = () => {\r\n    setPaddlePos(40); \r\n    setOpponentPaddlePos(40); \r\n    setBallPos({ top: 50, left: 50 }); \r\n    setBallSpeed(baseBallSpeed); \r\n    setScore(0); \r\n    setIsGameOver(false); \r\n    setIsGameStarted(true); \r\n  };\r\n  \r\n\r\n  if (!isGameStarted) {\r\n    return <StartScreen onStart={startGame} />;\r\n  }\r\n\r\n\r\n  if (isGameOver) {\r\n    \r\n    return (\r\n      <div className=\"pong\">\r\n        <div className=\"overlay\">\r\n          <GameOverScreen score={score} onRestart={restartGame} />\r\n        </div>\r\n        <Paddle top={paddlePos} isOpponent={false} />\r\n        <Paddle top={opponentPaddlePos} isOpponent={true} />\r\n        <Ball top={ballPos.top} left={ballPos.left} />\r\n      </div>\r\n    );\r\n  } else if (!isGameStarted) {\r\n    \r\n    return (\r\n      <div className=\"pong\">\r\n        <div className=\"overlay\">\r\n          <StartScreen onStart={startGame} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"pong\">\r\n      <Paddle top={paddlePos} isOpponent={false} />\r\n      <Paddle top={opponentPaddlePos} isOpponent={true} />\r\n      <Ball top={ballPos.top} left={ballPos.left} />\r\n      <div className=\"score\">Score: {score}</div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["StartScreen","_ref","onStart","_jsx","className","children","style","backgroundColor","_jsxs","onClick","GameOverScreen","_ref2","score","onRestart","Paddle","_ref3","top","isOpponent","concat","left","right","Ball","_ref4","paddlePos","setPaddlePos","useState","opponentPaddlePos","setOpponentPaddlePos","ballPos","setBallPos","ballDirection","setBallDirection","x","y","ballSpeed","setBallSpeed","setScore","isGameStarted","setIsGameStarted","isGameOver","setIsGameOver","useEffect","interval","setInterval","clearInterval","handleKeyDown","event","key","prev","Math","max","min","window","addEventListener","removeEventListener","paddleHeight","ballInterval","moveBall","newTop","newLeft","random","opponentMoveSpeed","prevPos","currentScore","currentSpeed","opponentInterval","updateOpponentPaddle","targetPos","startGame","restartGame"],"sourceRoot":""}