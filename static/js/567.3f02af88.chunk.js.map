{"version":3,"file":"static/js/567.3f02af88.chunk.js","mappings":"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","sources":["Snake/Snake.js","webpack://game-arcade/./src/Snake/Snake.css?7034"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Snake.css';\r\n\r\nconst gridSize = 20;\r\nconst gridUnit = 25;\r\n\r\nfunction App() {\r\n  const [snake, setSnake] = useState([{ x: 2, y: 2 }]);\r\n  const [direction, setDirection] = useState('RIGHT');\r\n  const [food, setFood] = useState({ x: 5, y: 5 });\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameStart, setGameStart] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      switch (e.key) {\r\n        case 'ArrowUp': setDirection('UP'); break;\r\n        case 'ArrowDown': setDirection('DOWN'); break;\r\n        case 'ArrowLeft': setDirection('LEFT'); break;\r\n        case 'ArrowRight': setDirection('RIGHT'); break;\r\n        default: break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!gameStart) return;\r\n\r\n    const moveSnake = () => {\r\n      let newSnake = [...snake];\r\n      let head = { ...newSnake[newSnake.length - 1] };\r\n\r\n      switch (direction) {\r\n        case 'UP': head.y -= 1; break;\r\n        case 'DOWN': head.y += 1; break;\r\n        case 'LEFT': head.x -= 1; break;\r\n        case 'RIGHT': head.x += 1; break;\r\n        default: break;\r\n      }\r\n\r\n      if (head.x < 0 || head.x >= gridSize || head.y < 0 || head.y >= gridSize || newSnake.find(segment => segment.x === head.x && segment.y === head.y)) {\r\n        setGameOver(true);\r\n        return;\r\n      }\r\n\r\n      newSnake.push(head);\r\n      if (head.x === food.x && head.y === food.y) {\r\n        setScore(score + 1);\r\n        setFood({ x: Math.floor(Math.random() * gridSize), y: Math.floor(Math.random() * gridSize) });\r\n      } else {\r\n        newSnake.shift();\r\n      }\r\n\r\n      setSnake(newSnake);\r\n    };\r\n\r\n    const gameLoop = setInterval(moveSnake, 200);\r\n\r\n    return () => clearInterval(gameLoop);\r\n  }, [snake, direction, gameStart, food, score]);\r\n\r\n  const startGame = () => {\r\n    setGameStart(true);\r\n    setGameOver(false);\r\n    setSnake([{ x: 2, y: 2 }]);\r\n    setDirection('RIGHT');\r\n    setFood({ x: 5, y: 5 });\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!gameStart ? (\r\n        <div className=\"overlay\">\r\n          <div className=\"screen startScreen\">\r\n            <h2>Welcome to Snake Game!</h2>\r\n            <p>Hit the button to start playing</p>\r\n            <button onClick={startGame} className=\"startButton\">Start Game</button>\r\n          </div>\r\n        </div>\r\n      ) : gameOver ? (\r\n        <div className=\"overlay\">\r\n          <div className=\"screen gameOverScreen\">\r\n            <h2>Game Over</h2>\r\n            <p>Your final score: {score}</p>\r\n            <button onClick={startGame} className=\"restartButton\">Restart</button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className=\"game-area\" style={{ width: gridSize * gridUnit, height: gridSize * gridUnit }}>\r\n            {snake.map((segment, index) => (\r\n              <div className=\"snake\" key={index} style={{ left: `${segment.x * gridUnit}px`, top: `${segment.y * gridUnit}px` }}></div>\r\n            ))}\r\n            <div className=\"food\" style={{ left: `${food.x * gridUnit}px`, top: `${food.y * gridUnit}px` }}></div>\r\n          </div>\r\n          <div className=\"score\">Score: {score}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n  \r\n\r\n}\r\n\r\nexport default App;","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["gridSize","gridUnit","snake","setSnake","useState","x","y","direction","setDirection","food","setFood","gameOver","setGameOver","gameStart","setGameStart","score","setScore","useEffect","handleKeyDown","e","key","document","addEventListener","removeEventListener","gameLoop","setInterval","moveSnake","newSnake","head","length","find","segment","push","Math","floor","random","shift","clearInterval","startGame","_jsx","className","children","_jsxs","onClick","style","width","height","map","index","left","concat","top"],"sourceRoot":""}